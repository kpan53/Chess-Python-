"""
- The Driver File
- Handles User Input
- Display Current Game State object
"""

import pygame as p
from Chess import ChessEngine, ChessAI


global colors

p.init()
BOARD_WIDTH = BOARD_HEIGHT = 512 # or 400 are good resolutions
MOVE_LOG_PANEL_WIDTH = 250
MOVE_LOG_PANEL_HEIGHT = BOARD_HEIGHT
DIMENSION = 8 # 8x8 Board
SQ_SIZE = BOARD_HEIGHT // DIMENSION
MAX_FPS = 15 #For animations
IMAGES = {}

'''
Only want to render images once
Will initialze a global dictionary of images
Will be called exactly once within main
'''


def loadImages():
    pieces = ['wP', 'wR', 'wB', 'wN', 'wK', 'wQ', 'bP', 'bR', 'bB', 'bN', 'bK', 'bQ']
    for piece in pieces:
        IMAGES[piece] = p.transform.scale(p.image.load("images/" + piece + ".png"), (SQ_SIZE, SQ_SIZE))
    # We can access an image by --> IMAGES['wP']


'''
The main driver
- Will handle User Input
_ Will handle updating graphics
'''


def main():
    p.init()
    screen = p.display.set_mode((BOARD_WIDTH + MOVE_LOG_PANEL_WIDTH, BOARD_HEIGHT))
    clock = p.time.Clock()
    screen.fill(p.Color("white"))
    moveLogFont = p.font.SysFont("Arial", 12, True, False)
    gameState = ChessEngine.GameState()
    validMoves = gameState.getValidMoves()
    moveMade = False # Flag Variable for when a VALID move is made
    animate = False # Flag variable for when a move should be animated
    loadImages() # Done only once since before loop
    running = True
    sqSelected = () # No square initially selected, keeps track of the last click of the user (tuple: (row, col))
    playerClicks = [] # Keeps track of player clicks (two tuples: [(6,4), (4,4)])
    gameOver = False
    playerOne = False # If a Human is playing white, then this will be true, If an AI is playing than false
    playerTwo = False # Same for black
    while running:
        humanTurn = (gameState.whiteToMove and playerOne) or (not gameState.whiteToMove and playerTwo)
        for e in p.event.get():
            if e.type == p.QUIT:
                running = False
            # Mouse Handler
            elif e.type == p.MOUSEBUTTONDOWN:
                if not gameOver and humanTurn:
                    location = p.mouse.get_pos() # (x,y) location of mouse
                    row = location[1] // SQ_SIZE
                    col = location[0]//SQ_SIZE

                    # The user clicked the same square again or clicked in move log
                    if sqSelected == (row, col) or col >= 8:
                        sqSelected = () # Deselects
                        playerClicks = []
                    else:
                        sqSelected = (row, col)
                        playerClicks.append(sqSelected) # Append for both first and second clicks
                    if len(playerClicks) == 2: # After the second click
                        move = ChessEngine.Move(playerClicks[0], playerClicks[1], gameState.board)
                        print(move.getChessNotation())
                        # This will be the move generated by the engine
                        for i in range(len(validMoves)):
                            if move == validMoves[i]:
                                gameState.makeMove(validMoves[i])
                                moveMade = True
                                animate = True
                                sqSelected = () # Rest user clicks
                                playerClicks = []
                        if not moveMade:
                            playerClicks = [sqSelected]

            # Key Handlers
            elif e.type == p.KEYDOWN:
                if e.key == p.K_z: # Undo when 'z' is pressed
                    gameState.undoMove()
                    moveMade = True
                    animate = False
                    gameOver = False
                if e.key == p.K_r: # Reset the board when 'r' is pressed
                    gameState = ChessEngine.GameState()
                    validMoves = gameState.getValidMoves()
                    sqSelected = ()
                    playerClicks = []
                    moveMade = False
                    animate = False
                    gameOver = False

        # AI move finder
        if not gameOver and not humanTurn:
            AIMove = ChessAI.findBestMove(gameState, validMoves)
            if AIMove is None: # Shouldn't happen, but if the AI think's it has no chance, then just make random moves
                AIMove = ChessAI.findRandomMove(validMoves)
            gameState.makeMove(AIMove)
            moveMade = True
            animate = True

        if moveMade:
            if animate:
                animateMove(gameState.moveLog[-1], screen, gameState.board, clock)
            validMoves = gameState.getValidMoves()
            moveMade = False
            animate = False

        drawGameState(screen, gameState, validMoves, sqSelected, moveLogFont)

        if gameState.checkmate or gameState.stalemate:
            gameOver = True
            text = 'Stalemate!' if gameState.stalemate \
                else 'Black got bodied!' if gameState.whiteToMove \
                else 'White got bodied!'
            drawEndGameText(screen, text)


        clock.tick(MAX_FPS)
        p.display.flip()


'''
Responsible for graphics within a current gameState
'''


def drawGameState(screen, gameState, validMoves, sqSelected, moveLogFont):
    drawBoard(screen) # Draws squares on the board
    highlightSqaures(screen, gameState, validMoves, sqSelected)
    drawPieces(screen, gameState.board) # Draw pieces on top of board
    drawMoveLog(screen, gameState, moveLogFont)


'''
Highlight square selected, and moves available for piece selected
'''
def highlightSqaures(screen, gameState, validMoves, sqSelected):
    if sqSelected != ():
        row, col = sqSelected
        # Check that sqSelceted is a piece that ca be moved by whoever turn it is (aka their own piece)
        if gameState.board[row][col][0] == ('w' if gameState.whiteToMove else 'b'):
            # Highlight Selected Square
            square = p.Surface((SQ_SIZE, SQ_SIZE))
            square.set_alpha(100)
            square.fill(p.Color('red'))
            screen.blit(square, (col * SQ_SIZE, row * SQ_SIZE))
            # Highlight moves from that square
            square.fill(p.Color('yellow'))
            for move in validMoves:
                if move.startRow == row and move.startCol == col:
                    screen.blit(square, (SQ_SIZE * move.endCol, SQ_SIZE * move.endRow))




'''
Draw the squares on the board
'''


def drawBoard(screen):
    global colors
    colors = [p.Color("light gray"), p.Color("dark green")]
    for row in range(DIMENSION):
        for col in range(DIMENSION):
            color = colors[((row+col) % 2)]
            p.draw.rect(screen, color, p.Rect(col*SQ_SIZE, row*SQ_SIZE, SQ_SIZE, SQ_SIZE))


'''
Draw the pieces on the board using the GameState.board
'''


def drawPieces(screen, board):
    for row in range(DIMENSION):
        for col in range(DIMENSION):
            piece = board[row][col]
            if piece != "--": # Not an empty square
                # Used to draw an image over an image
                screen.blit(IMAGES[piece], p.Rect(col*SQ_SIZE, row*SQ_SIZE, SQ_SIZE, SQ_SIZE))

def drawMoveLog(screen, gameState, font):
    moveLogRect = p.Rect(BOARD_WIDTH, 0, MOVE_LOG_PANEL_WIDTH, MOVE_LOG_PANEL_HEIGHT)
    p.draw.rect(screen, p.Color("gray"), moveLogRect)
    moveLog = gameState.moveLog
    moveTexts = []
    for i in range(0, len(moveLog), 2):
        moveString = str(i//2 + 1) + ". " + str(moveLog[i]) + " "
        if i + 1 < len(moveLog): # Make sure Black made a move
            moveString += str(moveLog[i + 1])
        moveTexts.append(moveString)
    movesPerRow = 3
    padding = 5
    lineSpacing = 2
    textY = padding
    for i in range(0, len(moveTexts), movesPerRow):
        text = ""
        for j in range(movesPerRow):
            if i + j < len(moveTexts):
                text += moveTexts[i + j]
                text += "     "
        textObject = font.render(text, True, p.Color("dark green"))
        textLocation = moveLogRect.move(padding, textY)
        screen.blit(textObject, textLocation)
        textY += textObject.get_height() + lineSpacing # To render moves underneath each other


'''
Animating a move
'''

def animateMove(move, screen, board, clock):
    global colors
    deltaRow = move.endRow - move.startRow
    deltaCol = move.endCol - move.startCol
    framesPerSquare = 10 # Frames to move one square
    frameCount = (abs(deltaRow) + abs(deltaCol)) * framesPerSquare
    for frame in range(frameCount + 1):
        row, col = (move.startRow + deltaRow * (frame / frameCount), move.startCol + deltaCol * (frame / frameCount))
        drawBoard(screen)
        drawPieces(screen, board)
        # Need to erase pieceMoved from ending square because it's animated in initially
        color = colors[(move.endRow + move.endCol) % 2]
        endSquare = p.Rect(move.endCol * SQ_SIZE, move.endRow * SQ_SIZE, SQ_SIZE, SQ_SIZE)
        p.draw.rect(screen, color, endSquare)
        # Draw Captured Piece onto rectangle
        if move.pieceCaptured != '--':
            if move.isEnPassantMove:
                enPassantRow = move.endRow + 1 if move.pieceCaptured[0] == 'b' else move.endRow - 1
                endSquare = p.Rect(move.endCol * SQ_SIZE, enPassantRow * SQ_SIZE, SQ_SIZE, SQ_SIZE)
            screen.blit(IMAGES[move.pieceCaptured], endSquare)
        # Draw moving piece
        screen.blit(IMAGES[move.pieceMoved], p.Rect(col * SQ_SIZE, row * SQ_SIZE, SQ_SIZE, SQ_SIZE))
        p.display.flip()
        clock.tick(60)

def drawEndGameText(screen, text):
    font = p.font.SysFont("Helvitca", 50, True, False)
    textObject = font.render(text, 0, p.Color("white"))
    textLocation = p.Rect(0, 0, BOARD_WIDTH, BOARD_HEIGHT).move(BOARD_WIDTH / 2 - textObject.get_width() / 2,
                                                                BOARD_HEIGHT / 2 - textObject.get_height() / 2) # Centering text
    screen.blit(textObject, textLocation)
    textObject = font.render(text, 0, p.Color('Black'))
    screen.blit(textObject, textLocation.move(2, 2))



if __name__ == "__main__":
    main()
